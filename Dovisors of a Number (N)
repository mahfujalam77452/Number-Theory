//NOD of N is always even except for when N is a perfect square.
void printDivisors(int n)
{
    // Note that this loop runs till square root
    for (int i=1; i<=sqrt(n); i++)
    {
        if (n%i == 0)
        {
            // If divisors are equal, print only one
            if (n/i == i)
                cout <<" "<< i;
  
            else // Otherwise print both
                cout << " "<< i << " " << n/i;
        }
    }
}
//Number of divisors using prime factorization.
/*
So, if N=p1^a1×p2^a2×...px^ax, then D=p1^b1×p2^b2...px^bx.
We get new divisors for using different combination for b1,b2...bx. 
How many different combinations can we make? (a1+1)×(a2+1)×...(ax+1). 
Therefore, σ0(N)=(a1+1)×(a2+1)×...(ax+1).
*/
